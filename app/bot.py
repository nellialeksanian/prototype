import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    CallbackQueryHandler,
    ContextTypes
)

from dotenv import load_dotenv
from generation.generation_route import generate_route
from generation.generate_artwork_info import generate_artwork_info
from generation.generate_voice import converter_text_to_voice
from generation.generate_answer import generate_answer, generate_answer_max
from process_data.load_data import send_text_in_chunks
from generation.generate_goodbye_word import exhibition_description, generate_goodbye_word
from validation.validation_QA import evaluate_hallucinations
from validation.validation_artworkinfo import evaluate_hallucinations_artworkinfo
import random 
import re
load_dotenv()


def create_keyboard(buttons):
    return InlineKeyboardMarkup([[InlineKeyboardButton(text, callback_data=data) for text, data in buttons]])

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.update({'state': 'route_mode', 'current_artwork_index': 0})
    keyboard = [["–°—Ç–∞—Ä—Ç"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üëã –Ø —Ç–≤–æ–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –≥–∏–¥ –ø–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –≤—ã—Å—Ç–∞–≤–∫–µ '–ú–æ—è –¢—Ä–µ—Ç—å—è–∫–æ–≤–∫–∞'. –ú–æ—è —Ü–µ–ª—å ‚Äî –ø—Ä–æ–≤–µ—Å—Ç–∏ —Ç–µ–±—è –ø–æ –º—É–∑–µ—é –∏ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ–± —ç–∫—Å–ø–æ–Ω–∞—Ç–∞—Ö –∏ –∏—Å—Ç–æ—Ä–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –¥–µ–ª–∞—é—Ç –∫–∞–∂–¥—É—é –≤—ã—Å—Ç–∞–≤–∫—É —É–Ω–∏–∫–∞–ª—å–Ω–æ–π.\n"
        "\n"
        "–ù–æ —Å–Ω–∞—á–∞–ª–∞ –¥–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è! –†–∞—Å—Å–∫–∞–∂–∏ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ: —Å–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç, —á–µ–º —Ç—ã —É–≤–ª–µ–∫–∞–µ—à—å—Å—è? "
        "–ß—Ç–æ —Ç–µ–±—è –ø—Ä–∏–≤–µ–ª–æ –≤ –º—É–∑–µ–π ‚Äî —Ç—ã –∑–¥–µ—Å—å —Ä–∞–¥–∏ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è, —É—á–µ–±—ã –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ä–µ—à–∏–ª(–∞) –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è? "
        "–ß–µ–º –±–æ–ª—å—à–µ —è –æ —Ç–µ–±–µ —É–∑–Ω–∞—é, —Ç–µ–º –±–æ–ª–µ–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –±—É–¥–µ—Ç —Ç–≤–æ—è —ç–∫—Å–∫—É—Ä—Å–∏—è! üòä", reply_markup = reply_markup
    )
    context.user_data['state'] = 'awaiting_description'

async def handle_user_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    state = context.user_data.get('state')

    if state == 'awaiting_description':
        context.user_data['user_description'] = update.message.text  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        keyboard = create_keyboard([
            ("–° –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º", "with_images"), 
            ("–ë–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", "without_images")
        ])
        await update.message.reply_text(
            "–Ø –æ—á–µ–Ω—å —Ä–∞–¥ —Å –≤–∞–º–∏ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! –¢–µ–ø–µ—Ä—å –æ—Å—Ç–∞–ª–æ—Å—å –ª–∏—à—å –≤—ã–±—Ä–∞—Ç—å —É–¥–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —ç–∫—Å–∫—É—Ä—Å–∏–∏, –∏ –º—ã —Å–º–æ–∂–µ–º –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å!\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —ç–∫—Å–ø–æ–Ω–∞—Ç–∞—Ö:",
            reply_markup=keyboard
        )
        context.user_data['state'] = 'awaiting_format'
    elif state == 'route_mode':
        await update.message.reply_text("–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ, —è –≥–æ—Ç–æ–≤–ª—é –≤–∞—à –º–∞—Ä—à—Ä—É—Ç... ‚è≥")
        user_query = update.message.text
        user_description = context.user_data.get('user_description', '')
        top_k = context.user_data.get('top_k', 5)
        route, artworks = generate_route(top_k, user_description, user_query)
        context.user_data['artworks'] = artworks

        clean_route_for_gen = re.sub(r'[^a-zA-Z–∞-—è–ê-–Ø—ë–Å0-9\s.,]', '', route)
        clean_route = re.sub(r'[^a-zA-Z–∞-—è–ê-–Ø—ë–Å0-9\s.,:"¬´¬ª]', '', route)
        voice_route = await converter_text_to_voice(clean_route_for_gen)
        
        await send_text_in_chunks(clean_route, lambda text: update.message.reply_text(text, parse_mode="Markdown"))
        await update.message.reply_voice(voice_route)
        
        with open("data/Slovcova/route.jpg", "rb") as photo: 
            await update.message.reply_photo(photo, caption="–ö–∞—Ä—Ç–∞ –º–∞—Ä—à—Ä—É—Ç–∞")

        await update.message.reply_text(
            "–í—ã –≥–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å —ç–∫—Å–∫—É—Ä—Å–∏—é?", 
            reply_markup=create_keyboard([("–î–∞, —è –≥–æ—Ç–æ–≤(–∞)", "next_artwork")])
        )
    elif state == 'question_mode':
        await process_question(update, context)

async def handle_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    context.user_data['send_images'] = query.data == "with_images" 
    await query.answer()

    keyboard = create_keyboard([
        ("üïí –≠–∫—Å–ø—Ä–µ—Å—Å", "short"),
        ("‚è≥ –°—Ç–∞–Ω–¥–∞—Ä—Ç", "medium"),
        ("üï∞ –ü–æ–ª–Ω–æ–µ –ø–æ–≥—Ä—É–∂–µ–Ω–∏–µ", "long")
    ])
    
    await query.message.reply_text(
        "–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —ç–∫—Å–∫—É—Ä—Å–∏–∏:",
        reply_markup=keyboard
    )

    context.user_data['state'] = 'awaiting_tour_length'


async def handle_tour_length(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    tour_lengths = {
        "short": random.randint(3, 7),
        "medium": random.randint(8, 12),
        "long": random.randint(13, 20)
    }
    
    context.user_data['top_k'] = tour_lengths[query.data]  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–ª–∏–Ω—É —ç–∫—Å–∫—É—Ä—Å–∏–∏
    context.user_data['state'] = 'route_mode'

    await query.message.reply_text("–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –º—É–∑–µ–µ —Å–µ–≥–æ–¥–Ω—è?")
    
async def process_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_question = update.message.text
    index = context.user_data['last_shown_artwork_index']
    artwork = context.user_data['artworks'][index]
    user_description = context.user_data.get('user_description', '')
    await update.message.reply_text("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –≤–æ–ø—Ä–æ—Å... –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ! ‚è≥")
    answer = generate_answer(user_question, artwork, user_description)
    validation_res = evaluate_hallucinations(artwork.get("text"), answer, user_question)
    print(f'validation result:{ validation_res}')

    if validation_res.lower() == "false":
        clean_answer = re.sub(r'[^a-zA-Z–∞-—è–ê-–Ø—ë–Å0-9\s.,]', '', answer) 
        voice_answer = await converter_text_to_voice(clean_answer)
        await update.message.reply_text(answer, parse_mode="Markdown")
        await update.message.reply_voice(voice_answer)

    else: 
        answer_max = generate_answer_max(user_question, artwork, user_description)
        secondary_validation_res = evaluate_hallucinations(artwork.get("text"), answer_max, user_question)
        if secondary_validation_res.lower() == "false":
            await update.message.reply_text(answer_max)
            clean_answer_max = re.sub(r'[^a-zA-Z–∞-—è–ê-–Ø—ë–Å0-9\s.,]', '', answer_max) 
            voice_answer_max = await converter_text_to_voice(clean_answer_max)
            await update.message.reply_voice(voice_answer_max)    
            print(f'secondary validation result:{ secondary_validation_res}')
        else: 
            await update.message.reply_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –∑–∞—Ç—Ä—É–¥–Ω—è—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä—É–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å.")

    current_artwork_index = context.user_data['current_artwork_index']
    if current_artwork_index < len(context.user_data['artworks']):
        keyboard = [[InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∏–π —ç–∫—Å–ø–æ–Ω–∞—Ç", callback_data='next_artwork')]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text("–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –µ—â—ë –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç–∫—Å–ø–æ–Ω–∞—Ç—É", reply_markup=reply_markup)
    else:
        keyboard = [[InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç", callback_data='end_tour')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –µ—â—ë –≤–æ–ø—Ä–æ—Å—ã. –≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–∫—Å–ø–æ–Ω–∞—Ç!", reply_markup=reply_markup)

async def next_artwork(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    current_artwork_index = context.user_data['current_artwork_index']
    context.user_data['state'] = 'question_mode'
    context.user_data['last_shown_artwork_index'] = current_artwork_index
    artwork = context.user_data['artworks'][current_artwork_index]

    await query.answer()
    user_description = context.user_data.get('user_description', '')
    await query.message.reply_text("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –≤–æ–ø—Ä–æ—Å... –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ! ‚è≥")
    artwork_info = generate_artwork_info(artwork.get("text"), user_description)
    #validation 
    validation_res = evaluate_hallucinations_artworkinfo(artwork.get("text"), artwork_info)
    print(f'validation result:{validation_res}')
    clean_artwork_info = re.sub(r'[^a-zA-Z–∞-—è–ê-–Ø—ë–Å0-9\s.,]', '', artwork_info) 
    voice_artwork = await converter_text_to_voice(clean_artwork_info)
    max_caption_length = 1024

    image_url = artwork.get("image")
    send_images = context.user_data.get('send_images', False)

    if send_images and image_url:
        if len(artwork_info) <= max_caption_length:
            await query.message.reply_photo(image_url, caption=artwork_info)
        else:
            await query.message.reply_photo(image_url, caption=artwork_info[:max_caption_length])
            await send_text_in_chunks(artwork_info[max_caption_length:], lambda text: query.message.reply_text(text, parse_mode="Markdown"))
    else:
        await send_text_in_chunks(artwork_info, lambda text: query.message.reply_text(text, parse_mode="Markdown"))

    await query.message.reply_voice(voice_artwork)

    context.user_data['current_artwork_index'] += 1

    if context.user_data['current_artwork_index'] < len(context.user_data['artworks']):
        keyboard = [[InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∏–π —ç–∫—Å–ø–æ–Ω–∞—Ç", callback_data='next_artwork')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text(
            "–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ —Ç–µ–∫—É—â–µ–º —ç–∫—Å–ø–æ–Ω–∞—Ç–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É.",
            reply_markup=reply_markup
        )
    else:
        keyboard = [[InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç", callback_data='end_tour')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text(
            "–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ —Ç–µ–∫—É—â–µ–º —ç–∫—Å–ø–æ–Ω–∞—Ç–µ. –≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–∫—Å–ø–æ–Ω–∞—Ç –Ω–∞—à–µ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞!",
            reply_markup=reply_markup
        )

async def end_tour(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_description = context.user_data.get('user_description', '')
    await query.message.reply_text(generate_goodbye_word(exhibition_description, user_description))

def main():
    app = ApplicationBuilder().token(os.getenv("TELEGRAM_TOKEN")).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("^–°—Ç–∞—Ä—Ç$"), start))
    app.add_handler(CallbackQueryHandler(handle_choice, pattern='^(with_images|without_images)$'))
    app.add_handler(CallbackQueryHandler(handle_tour_length, pattern='^(short|medium|long)$'))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_user_input))
    app.add_handler(CallbackQueryHandler(next_artwork, pattern='next_artwork'))
    app.add_handler(CallbackQueryHandler(end_tour, pattern='end_tour'))

    print("Museum Guide Bot is running!")
    app.run_polling()

if __name__ == '__main__':
    main()