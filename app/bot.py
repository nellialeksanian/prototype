import os
import asyncio
from aiogram import Bot, Dispatcher, F, types
from aiogram.types import (ReplyKeyboardMarkup, Message, CallbackQuery)
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from dotenv import load_dotenv
import random
import re
import logging

from generation.generate_voice import converter_text_to_voice
from generation.generation_route import route_builder
from generation.generate_artwork_info import generate_artwork_info
from generation.generate_answer import generate_answer, generate_answer_max
from process_data.load_data import send_images_then_text_group, send_text_in_chunks
from generation.generate_goodbye_word import generate_goodbye_word, exhibition_description
from validation.validation_QA import evaluate_hallucinations
from validation.validation_artworkinfo import evaluate_hallucinations_artworkinfo

logging.basicConfig(
    level=logging.DEBUG,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[
        logging.StreamHandler()
    ]
)

load_dotenv()
TOKEN = os.getenv("TELEGRAM_TOKEN")

class TourState(StatesGroup):
    awaiting_description = State()
    awaiting_format = State()
    awaiting_tour_length = State()
    route_mode = State()
    question_mode = State()

bot = Bot(token=TOKEN)
dp = Dispatcher()

def create_keyboard(buttons):
    keyboard = InlineKeyboardBuilder()
    for text, data in buttons:
        keyboard.button(text=text, callback_data=data)
    return keyboard.as_markup()

@dp.message(F.text == "/start")
@dp.message(F.text == "–°—Ç–∞—Ä—Ç")
async def start(message: Message, state: FSMContext):
    await state.set_state(TourState.awaiting_description)
    await state.update_data(state='route_mode', current_artwork_index=0)
    keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [types.KeyboardButton(text="–°—Ç–∞—Ä—Ç")],
        [types.KeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å —ç–∫—Å–∫—É—Ä—Å–∏—é")]
    ],
    resize_keyboard=True,
    # one_time_keyboard=True
    )
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! üëã –Ø ‚Äî —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –≥–∏–¥ –ø–æ –≤—ã—Å—Ç–∞–≤–∫–µ ¬´–ö—É–ª—å—Ç—É—Ä–Ω—ã–π —Å–ª–æ–π¬ª  .\n"
        "\n"
        "–Ø —Å–æ–∑–¥–∞–Ω –Ω–∞ –±–∞–∑–µ –º–æ–¥–µ–ª–∏ GigaChat ‚Äî —ç—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ —è —É–º–µ—é –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞—Ç—å—Å—è –ø–æ–¥ —Ç–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã –∏ –≤–µ—Å—Ç–∏ –Ω–∞—Å—Ç–æ—è—â—É—é –∂–∏–≤—É—é –±–µ—Å–µ–¥—É ü§ñ‚ú®\n"
        "\n"
        "–î–∞–≤–∞–π –Ω–µ–º–Ω–æ–≥–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è:\n"
        "üß† –°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?\n"
        "üé® –ß–µ–º —Ç—ã —É–≤–ª–µ–∫–∞–µ—à—å—Å—è?\n"
        "üí° –ß—Ç–æ –ø—Ä–∏–≤–µ–ª–æ —Ç–µ–±—è —Å—é–¥–∞: —É—á–µ–±–∞, –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ª—é–±–æ–ø—ã—Ç—Å—Ç–≤–æ?\n"
        "\n"
        "–ù–∞–ø–∏—à–∏ –≤ –æ—Ç–≤–µ—Ç –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ ‚Äî —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥–æ–π–¥—ë—Ç –∏–º–µ–Ω–Ω–æ —Ç–µ–±–µ üòä", 
        reply_markup=keyboard
    )

@dp.message(TourState.awaiting_description)
async def handle_description(message: Message, state: FSMContext):
    if message.text == "–ó–∞–≤–µ—Ä—à–∏—Ç—å —ç–∫—Å–∫—É—Ä—Å–∏—é":
        await end_tour_handler(message, state)
        return  
    await state.update_data(user_description=message.text)
    await state.set_state(TourState.awaiting_format)
    keyboard = create_keyboard([
        ("–° –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º", "with_images"),
        ("–ë–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", "without_images")
    ])
    await message.answer(
        "–Ø –æ—á–µ–Ω—å —Ä–∞–¥ —Å –≤–∞–º–∏ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!üôå\n"
        "\n"
        "–ö–∞–∫–æ–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–±–µ —É–¥–æ–±–µ–Ω?",
        reply_markup=keyboard
    )

@dp.callback_query(F.data.in_("with_images without_images".split()))
async def handle_format(query: CallbackQuery, state: FSMContext):
    await state.update_data(send_images=query.data == "with_images")
    await query.answer()
    await state.set_state(TourState.awaiting_tour_length)
    keyboard = create_keyboard([
        ("üïí –≠–∫—Å–ø—Ä–µ—Å—Å", "short"),
        ("‚è≥ –°—Ç–∞–Ω–¥–∞—Ä—Ç", "medium"),
        ("üï∞ –ü–æ–ª–Ω–æ–µ –ø–æ–≥—Ä—É–∂–µ–Ω–∏–µ", "long")
    ])
    await query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–∞—Ä—à—Ä—É—Ç–∞:", reply_markup=keyboard)

@dp.callback_query(F.data.in_(["short", "medium", "long"]))
async def handle_tour_length(callback: CallbackQuery, state: FSMContext):
    tour_lengths = {
        "short": random.randint(5, 9),
        "medium": random.randint(10, 18),
        "long": random.randint(19, 27)
    }

    top_k = tour_lengths.get(callback.data, 5)
    await state.update_data(top_k=top_k)
    await state.set_state(TourState.route_mode)

    await callback.answer()
    await callback.message.answer(
        "–ê —Ç–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å.\n"
        "–¢—ã –º–æ–∂–µ—à—å –ø—Ä–æ—Å—Ç–æ –æ–ø–∏—Å–∞—Ç—å —Ç–µ–º—É, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–ª–∏ –¥–∞–∂–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–∏–ø—ã —Ä–∞–±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—á–µ—à—å —É–≤–∏–¥–µ—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, *—è—Ä–∫–∏–µ –∫–∞—Ä—Ç–∏–Ω—ã*, *—á—Ç–æ-—Ç–æ –ø—Ä–æ –ø—Ä–∏—Ä–æ–¥—É*, *—Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–æ*).\n"
        "\n"
        "üìå –ß–µ–º —Ç–æ—á–Ω–µ–µ —Ç—ã —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–µ—à—å –∏–Ω—Ç–µ—Ä–µ—Å ‚Äî —Ç–µ–º —Ç–æ—á–Ω–µ–µ –±—É–¥–µ—Ç –º–∞—Ä—à—Ä—É—Ç!"
    )

@dp.message(TourState.route_mode)
async def generate_route_response(message: Message, state: FSMContext):
    data = await state.get_data()
    if message.text == "–ó–∞–≤–µ—Ä—à–∏—Ç—å —ç–∫—Å–∫—É—Ä—Å–∏—é":
        await end_tour_handler(message, state)
        return  
    await message.answer("–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ, —è –≥–æ—Ç–æ–≤–ª—é –≤–∞—à –º–∞—Ä—à—Ä—É—Ç... ‚è≥")
    user_query = message.text
    user_description = data.get('user_description', '')
    top_k = data.get("top_k", 5)
    logging.debug(f"top_k: {top_k}")
    route, artworks = route_builder.generate_route(k=top_k, user_description=user_description, user_query=user_query)
    await state.update_data(artworks=artworks)

    clean_route_for_gen = re.sub(r'[^a-zA-Z–∞-—è–ê-–Ø—ë–Å0-9\s.,]', '', route)
    clean_route = re.sub(r'[^a-zA-Z–∞-—è–ê-–Ø—ë–Å0-9\s.,:"¬´¬ª]', '', route)
    voice_route = await converter_text_to_voice(clean_route_for_gen)

    await send_text_in_chunks(clean_route, lambda text: message.answer(text, parse_mode=ParseMode.MARKDOWN))
    if voice_route:
        await message.answer_voice(voice_route)
    await message.answer("–í—ã –≥–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å —ç–∫—Å–∫—É—Ä—Å–∏—é?", reply_markup=create_keyboard([("–î–∞, —è –≥–æ—Ç–æ–≤(–∞)", "next_artwork")]))

@dp.callback_query(F.data == "next_artwork")
async def handle_next_artwork(query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    await state.set_state(TourState.question_mode)
    current_artwork_index = data.get('current_artwork_index', 0)
    artworks = data.get('artworks', [])
    
    artwork = artworks[current_artwork_index]
    await state.update_data(state='question_mode', last_shown_artwork_index=current_artwork_index)
    
    await query.answer()
    user_description = data.get('user_description', '')
    await query.message.answer("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –≤–æ–ø—Ä–æ—Å... –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ! ‚è≥")
    
    artwork_info = generate_artwork_info(artwork.get("text"), user_description)
    validation_res = evaluate_hallucinations_artworkinfo(artwork.get("text"), artwork_info)
    logging.debug(f'validation result:{validation_res}')
    
    clean_artwork_info = re.sub(r'[^a-zA-Z–∞-—è–ê-–Ø—ë–Å0-9\s.,]', '', artwork_info)
    voice_artwork = await converter_text_to_voice(clean_artwork_info)
    
    send_images = data.get('send_images', False)
    image_urls = artwork.get("image")
    print(f'image urls: {image_urls}')

    if send_images and image_urls:
        image_urls = [url.strip() for url in image_urls.split() if url.strip()]
        logging.debug(f"Image URLs to send: {image_urls}")

        await send_images_then_text_group(
            artwork_info,
            image_urls,
            lambda text: query.message.answer(text, parse_mode=ParseMode.MARKDOWN),
            bot,
            query.message.chat.id
        )
    else:
        await send_text_in_chunks(artwork_info, lambda text: query.message.answer(text, parse_mode=ParseMode.MARKDOWN))

    if voice_artwork:
        await query.message.answer_voice(voice_artwork)

    await state.update_data(current_artwork_index=current_artwork_index + 1)

    current_artwork_index_check = data.get('current_artwork_index', 0) + 1
    if current_artwork_index_check < len(artworks):
        keyboard = create_keyboard([("–°–ª–µ–¥—É—é—â–∏–π —ç–∫—Å–ø–æ–Ω–∞—Ç", "next_artwork")])
        await query.message.answer(
            "–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ —Ç–µ–∫—É—â–µ–º —ç–∫—Å–ø–æ–Ω–∞—Ç–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É.",
            reply_markup=keyboard
        )
    else:
        keyboard = create_keyboard([("–ó–∞–≤–µ—Ä—à–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç", "end_tour")])
        await query.message.answer(
            "–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ —Ç–µ–∫—É—â–µ–º —ç–∫—Å–ø–æ–Ω–∞—Ç–µ. –≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–∫—Å–ø–æ–Ω–∞—Ç –Ω–∞—à–µ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞!",
            reply_markup=keyboard
        )

@dp.message(TourState.question_mode)
async def process_question(message: Message, state: FSMContext):
    data = await state.get_data()
    if message.text == "–ó–∞–≤–µ—Ä—à–∏—Ç—å —ç–∫—Å–∫—É—Ä—Å–∏—é":
        await end_tour_handler(message, state)
        return  
    user_question = message.text
    artwork = data.get("artworks", [])[data.get("last_shown_artwork_index", 0)]

    await message.answer("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –≤–æ–ø—Ä–æ—Å... –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ! ‚è≥")
    
    answer = generate_answer(user_question, artwork, data.get("user_description"))
    validation_res = evaluate_hallucinations(artwork.get("text"), answer, user_question)
    logging.debug(f'validation result:{ validation_res}')
    
    if validation_res.lower() == "false":
        clean_answer = re.sub(r'[^a-zA-Z–∞-—è–ê-–Ø—ë–Å0-9\s.,]', '', answer)
        voice_answer = await converter_text_to_voice(clean_answer)
        await message.answer(answer, parse_mode=ParseMode.MARKDOWN)
        if voice_answer:
            await message.answer_voice(voice_answer)
    else:
        answer_max = generate_answer_max(user_question, artwork, data.get("user_description"))
        secondary_validation_res = evaluate_hallucinations(artwork.get("text"), answer_max, user_question)
        if secondary_validation_res.lower() == "false":
            await message.answer(answer_max)
            clean_answer_max = re.sub(r'[^a-zA-Z–∞-—è–ê-–Ø—ë–Å0-9\s.,]', '', answer_max)
            voice_answer_max = await converter_text_to_voice(clean_answer_max)
            await message.answer_voice(voice_answer_max)
        else:
            await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –∑–∞—Ç—Ä—É–¥–Ω—è—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å.")
    
    current_artwork_index = data.get("current_artwork_index", 0)
    if current_artwork_index < len(data.get("artworks")):
        keyboard = create_keyboard([("–°–ª–µ–¥—É—é—â–∏–π —ç–∫—Å–ø–æ–Ω–∞—Ç", "next_artwork")])
        await message.answer("–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ —Ç–µ–∫—É—â–µ–º —ç–∫—Å–ø–æ–Ω–∞—Ç–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É.", reply_markup=keyboard)
    else:
        keyboard = create_keyboard([("–ó–∞–≤–µ—Ä—à–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç", "end_tour")])
        await message.answer("–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ —Ç–µ–∫—É—â–µ–º —ç–∫—Å–ø–æ–Ω–∞—Ç–µ. –≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–∫—Å–ø–æ–Ω–∞—Ç –Ω–∞—à–µ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞!", reply_markup=keyboard)

@dp.message(F.text == "–ó–∞–≤–µ—Ä—à–∏—Ç—å —ç–∫—Å–∫—É—Ä—Å–∏—é")
@dp.callback_query(F.data == "end_tour")
async def end_tour_handler(message_or_query, state: FSMContext):
    if isinstance(message_or_query, Message):
        message = message_or_query
        goodbye_text = generate_goodbye_word(exhibition_description, (await state.get_data()).get("user_description", ""))
        await message.answer(goodbye_text + f"\n\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ–º –º—É–∑–µ—è –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞ [—Å–∞–π—Ç–µ](https://museum72.ru/afisha/glavnyy-kompleks-imeni-i-ya-slovtsova/muzeynyy-kompleks-imeni-i-ya-slovtsova/kulturnyy-sloy/).", parse_mode=ParseMode.MARKDOWN)
    else:
        query = message_or_query
        await query.answer()
        goodbye_text = generate_goodbye_word(exhibition_description, (await state.get_data()).get("user_description", ""))
        await query.message.answer(goodbye_text + f"\n\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ–º –º—É–∑–µ—è –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞ [—Å–∞–π—Ç–µ](https://museum72.ru/afisha/glavnyy-kompleks-imeni-i-ya-slovtsova/muzeynyy-kompleks-imeni-i-ya-slovtsova/kulturnyy-sloy/).", parse_mode=ParseMode.MARKDOWN)

    feedback_form = (
        "–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ú—É–∑–µ–π–Ω–æ–≥–æ –ò–ò-–≥–∏–¥–∞!\n"
        "–¢–≤–æ—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å **–æ—á–µ–Ω—å –≤–∞–∂–Ω–∞** –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –ø—Ä–æ–µ–∫—Ç–∞.\n\n"
        "–ú—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ –Ω–µ–±–æ–ª—å—à—É—é —Ñ–æ—Ä–º—É —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏. –¢–∞–º —Ç—ã —Å–º–æ–∂–µ—à—å —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å, —á—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –∏ —Å–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.\n\n"
        "üìù [–û—Ü–µ–Ω–∏—Ç—å —ç–∫—Å–∫—É—Ä—Å–∏—é –∏ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –º–Ω–µ–Ω–∏–µ–º](https://forms.gle/your-google-form-link)\n\n"
        "–î–æ –Ω–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á –≤ –º–∏—Ä–µ –∏—Å–∫—É—Å—Å—Ç–≤–∞! üé®"
    )

    if isinstance(message_or_query, Message):
        await message.answer(feedback_form, parse_mode=ParseMode.MARKDOWN)
    else:
        await query.message.answer(feedback_form, parse_mode=ParseMode.MARKDOWN)

    await state.clear()

async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())